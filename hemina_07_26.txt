主  题：日报
汇报人：何米娜
日  期：2018年7月26日 星期四
内  容：
1.今日学习了的内容：

1)MyBatis的代码
2)小demo的实现
3）String的源码

2.没有解决的问题：

1）小demo的service


3.明天的学习计划：
1)小demo的service
2)快速排序的第三种方法


4.学习任务完成度： （80）  %[注：0% ~ 100%]
5.对自己今天学习的满意度：（8）分 [注：1-10分]
6.对今天的学习做一句话的总结：
	继续努力
算法1：
题目：
package com.xxy.digui;

import java.util.Scanner;

/**
 * 青蛙跳台阶
 * @author Lenovo
 *
 */
public class FlogFibo {
	/**
	 * 	一只青蛙一次可以跳上1级台阶，也可以跳上2级。
	 * 求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）
	 *  相当于Fibonacci的求法
	 * 构建了1 2 3 5 8 13 ...
	 */

//	public static int JumpFloor(int target){
//		if(target<1){
//			return 0;
//		}
//		if(target==1){
//			return 1;
//		}
//		if(target==2){
//			return 2;
//		}
//		return JumpFloor(target-1)+JumpFloor(target-2);
//	}
	
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		int floor=scan.nextInt();
		int count=JumpFloor(floor);
		System.out.println(count);
	}
	/**
	 *上一个的升级版
	 *一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。
	 *求该青蛙跳上一个n级的台阶总共有多少种跳法
	 * @param floor
	 * @return
	 * 针对于1级，2级台阶跳，没有区别；到3级的跳法时：第一次可以跳1，2，3级
	 * 4级的跳法时：第一次可以跳1，2，3，4级
	 * 以此类推，第一次的跳法都可以用跳1级叠加而成，所以为2^(n-1)
	 */
	public static int JumpFloor(int floor) {
		if(floor==0){
			return 0;
		}
		if(floor==1){
			return 1;
		}
		return JumpFloor(floor-1)*2;
	}
}

算法二：
题目：
package com.xxy.weiyunsuai;

import java.util.Scanner;

public class Count1 {
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		int n0=scan.nextInt();
		int n=If1Count(n0);
		System.out.println(n);
	}

	public  static int If1Count(int n0) {
		int count=0;

//将其转换成二进制字符串，在将其转换成字符数组
//		char[] ch1=Integer.toBinaryString(n0).toCharArray();
//		for (int i = 0; i < ch1.length; i++) {
//			char c = ch1[i];
//			if(c=='1'){
//				count++;
//			}
//		}

//利用传入数n0的大小进行减一的操作，看其包含有多少个1
		while(n0!=0){
			count++;
		 n0=(n0-1)&n0;
		}
		return count;
	}

}




算法一


给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。画 n 条垂直线，使得垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

注意：你不能倾斜容器，n 至少是2。
class Solution {
    public int maxArea(int[] height) {
        int left=0,right=height.length-1;
        int max=0;
        while(left<right){
            int h=height[left]<height[right]?left:right;
            max=max<(right-left)*height[h]?(right-left)*height[h]:max;
            int c=h==left?left++:right--;
        }
        return max;
    }
}
算法二

编写一个函数来查找字符串数组中的最长公共前缀。

如果不存在公共前缀，返回空字符串 ""。

示例 1:

输入: ["flower","flow","flight"]
输出: "fl"
示例 2:

输入: ["dog","racecar","car"]
输出: ""
解释: 输入不存在公共前缀。
说明:

所有输入只包含小写字母 a-z 。
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs==null||strs.length<1){
            return "";
        }
        if(strs.length==1){
            return strs[0];
        }
        int min=strs[0].length();
        String s="";
        for(int i=1;i<strs.length;++i){
            min=min>strs[i].length()?strs[i].length():min;
        }
        while(min>0){
            String help=strs[0].substring(0,min);
            int i=1;
            for(;i<strs.length&&help.equals(strs[i].substring(0,min));++i);
            if(i==strs.length){
                s=strs[0].substring(0,min);
                break;
            }
            else{
                min--;
            }
        }
        return s;
    }
}
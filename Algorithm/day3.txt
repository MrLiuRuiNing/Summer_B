 算法一：旋转链表
题目描述提示帮助提交记录社区讨论阅读解答
给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null){
            return head;
        }
        int cnt=0,mode=0;
        ListNode h1=null;
        ListNode p=null,q=null;
        for(ListNode h=head;h!=null;h=h.next,cnt++);
        cnt=k%cnt;
        if(cnt==0){
            return head;
        }
        for(q=p=head;p.next!=null;p=p.next){
            if(cnt==0){
                q=q.next;
            }else{
                cnt--;
            }
        }
        h1=q.next;
        q.next=null;
        p.next=head;
        return h1;
    }
}
算法二：加一
题目描述提示帮助提交记录社区讨论阅读解答
给定一个非负整数组成的非空数组，在该数的基础上加一，返回一个新的数组。

最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:

输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。
示例 2:

输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。
class Solution {
    public int[] plusOne(int[] digits) {
        int cp=1;
        int []res;
        boolean bool=false;
        for(int i=digits.length-1;i>-1;--i){
            int sum=digits[i]+cp;
            cp=sum/10;
            digits[i]=sum%10;
        }
        if(cp!=0){
            res=new int[digits.length+1];
            res[0]=cp;
            for(int j=0;j<res.length-1;j++){
                res[j+1]=digits[j];
            }
        }else{
            res=digits;
        }
        return res;
    }
}
算法一

将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        if(l1==null){
            return l2;
        }
        else if(l2==null){
            return l1;
        }
        ListNode h1=null;
        ListNode q=null,p=null;
        while(l1!=null&&l2!=null){
            if(l1.val<l2.val){
                q=l1;
                l1=l1.next;
            }
            else{
                q=l2;
                l2=l2.next;
            }
            if(h1==null){
                h1=q;
                p=q;
            }
            else{
                p.next=q;
                p=p.next;
            }
        }
        if(l1==null){
            p.next=l2;
        }
        else{
            p.next=l1;
        }
        return h1;
    }
}
算法二
给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。

例如，给出 n = 3，生成结果为：

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res=new ArrayList<String>();
        find(res,0,0,n,"");
        return res;
    }
    public void find(List<String> res,int left,int right,int len,String s){
        if(s.length()==len*2){
            res.add(s);
            return;
        }
        if(left<len){
            find(res,left+1,right,len,s+"(");
        }
        if(right<left){
            find(res,left,right+1,len,s+")");
        }
    }
}
A:什么是面向对象？
      是基于面向过程而言的，就是说面向对象是将功能等通过对象来实现，将功能封装进对象之中，让对象去实现具体的细节；这种思想是将数据作为第一位，而方法或者说是算法作为其次，这是对数据一种优化，操作起来更加的方便，简化了过程。
eg. 面向过程而言: 考虑处理事务的每个过程，然后执行
面向对象而言：考虑那个可以完成处理这个事务的对象，然后去调用这个对象。
B:Java的三大特性
        1.封装性
    java语言中，对象就是对一组变量和相关方法的封装，其中变量表明了对象的状态，方法表明了对象具有的行为。通过对象的封装，实现了模块化和信息隐藏。通过对类的成员施以一定的访问权限，实现了类中成员的信息隐藏。 
　　java语言中有四种不同的限定词，提供了四种不同的访问权限。 
　　1） private 
　　类中限定为private的成员，只能被这个类本身访问。 
　　如果一个类的构造方法声明为private,则其它类不能生成该类的一个实例。 
　　2） default 
　　类中不加任何访问权限限定的成员属于缺省的（default）访问状态，只允许同包访问； friend，可以被这个类本身和同一个包中的类所访问。 
     3） protected 
　　类中限定为protected的成员，可以被这个类本身、它的子类（包括同一个包中以及不同包中的子类）和      同一个包中的所有其他的类访问。 
     4） public 
　　类中限定为public的成员，可以被所有的类访问。
        2.继承性
      通过继承实现代码复用。Java中所有的类都是通过直接或间接地继承java.lang.Object类得到的。继承而得到的类称为子类，被继承的类称为父类。子类不能继承父类中访问权限为private的成员变量和方法。子类可以重写父类的方法，及命名与父类同名的成员变量。但Java不支持多重继承，即一个类从多个超类派生的能力。 
# 成员变量的隐藏和方法的重写 
　　子类通过隐藏父类的成员变量和重写父类的方法，可以把父类的状态和行为改变为自身的状态和行为。 
例如： 
　　class SuperClass{ 
　　　　int x; … 
　　　　void setX( ){ x=0; } … 
　　} 
　　class SubClass extends SuperClass{ 
　　　　int x; 　　//隐藏了父类的变量x 
　　　　… 
　　　　void setX( ) { //重写了父类的方法 setX() 
　　　　x=5; } …. 
　　} 
　　注意：子类中重写的方法和父类中被重写的方法要具有相同的名字，相同的参数表和相同的返回类型，只是函数体不同。 
　　◇ super 
　　java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。Super 的使用有三种情况： 
　　1）访问父类被隐藏的成员变量，如： 
　　　　super.variable; 
　　2）调用父类中被重写的方法，如： 
　　　　super.Method([paramlist]); 
　　3）调用父类的构造函数，如： 
　　　　super([paramlist]); 
        3.多态性
在java语言中，多态性体现在两个方面：由方法重载实现的静态多态性（编译时多态）和方法重写实现的动态多态性（运行时多态）。 
　　1） 编译时多态 
　　在编译阶段，具体调用哪个被重载的方法，编译器会根据参数的不同来静态确定调用相应的方法。 
　　2） 运行时多态 
　　由于子类继承了父类所有的属性（私有的除外），所以子类对象可以作为父类对象使用。程序中凡是使用父类对象的地方，都可以用子类对象来代替。一个对象可以通过引用子类的实例来调用子类的方法。 
　　◇ 重写方法的调用原则：java运行时系统根据调用该方法的实例，来决定调用哪个方法。对子类的一个实例，如果子类重写了父类的方法，则运行时系统调用子类的方法；如果子类继承了父类的方法（未重写），则运行时系统调用父类的方法。
前提：（1）类与类之间要有关系，要么继承，要么实现（2）要有方法重写（3）父类或者接口引用指向子类对象。
好处：（1）提高了代码的维护性（2）提高了代码的扩展性，父类引用指向子类对象
弊端：父类引用只能调用父类的方法，不能调用子类特有的方法和属  性。

*向上转型：父类或者父接口指向子类对象。
*向下转型：把那个引用强制转为子类对象。



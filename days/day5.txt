日报格式:
主  题：日报
汇报人：汤磊
日  期：2018年7月27日 星期五
内  容：
1.	今日学习了的内容：
1）	Springboot基本框架完成
2）	Linux的五个视频
3）	两道算法
4）	练习前一天看的Linux命令
5） 	Integer源码，List源码
2.	没有解决的问题：
1）	Linux网卡出现问题
3.	明天的学习计划：
1）	springboot的搭建（进一步的完善）
2）Linux5个视频
3）算法两道
4）Map、HashMap源码
4.学习任务完成度： （90）%[注：0% ~ 100%]
5.对自己今天学习的满意度：（7）分 [注：1-10分]
终于把springboot和mybatis连接在一块了
附录：
算法一： 
给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]
示例 2:

输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
class Solution {
     public List<List<Integer>> combinationSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(res, new ArrayList<>(), nums, target, 0);
        return res;
    }

    private void backtrack(List<List<Integer>> res, List<Integer> help, int [] nums, int remain, int start){
        if(remain < 0) return;
        else if(remain == 0) res.add(new ArrayList<>(help));
        else{ 
            for(int i = start; i < nums.length; i++){
                help.add(nums[i]);
                backtrack(res, help, nums, remain - nums[i], i); 
                help.remove(help.size() - 1);
            }
        }
    }
}

算法二：
给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

说明：

所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
所求解集为:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
示例 2:

输入: candidates = [2,5,2,1,2], target = 5,
所求解集为:
[
  [1,2,2],
  [5]
]
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> help=new ArrayList<List<Integer>> ();
        List<List<Integer>> res=new ArrayList<List<Integer>> ();
        List<Integer> mid=new ArrayList<Integer>();
        mid.add(0);
        help.add(mid);
        Arrays.sort(candidates);
        for(int i=0;i<candidates.length;++i){
            if(candidates[i]>target){
                break;
            }
            int len=help.size();
            List<Integer> med=new ArrayList<Integer>();
            int x=i-1;
            int sum=candidates[i];
            med.add(candidates[i]);
            while(x>-1&&candidates[x]==candidates[x+1]){
                med.add(candidates[x]);
                sum+=candidates[x];      
                   x--;
            }
            med.add(sum);
            for(int j=0;j<len;++j){
                mid=new ArrayList<Integer>(help.get(j));
                if(mid.size()>1&&mid.get(mid.size()-2)==med.get(0)){
                    continue ;
                }
                sum=mid.get(mid.size()-1)+med.get(med.size()-1);
                if(sum>target){
                    continue;
                }
                mid.remove(mid.size()-1);
                mid.addAll(med);
                mid.set(mid.size()-1,sum);
                help.add(mid);
                if(sum==target){
                    mid.remove(mid.size()-1);
                    List<Integer> re=new ArrayList<Integer>(mid);
                        res.add(re);
                    mid.add(sum);
                }
            }
        }
        return res;
    }
}
【学习内容真实可靠，给自己的评分和完成度客观真实，不谦虚，不夸大】

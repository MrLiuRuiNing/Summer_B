日报格式:
主  题：日报
汇报人：汤磊
日  期：2018年7月24日 星期二
内  容：
1.	今日学习了的内容：
1）	springboot的初步搭建
2）	Linux的十个视频
3）	四道算法
4）	看Object源码
2.	没有解决的问题：
1）	没有看springboot
3.	明天的学习计划：
1）	springboot的进一步搭建
2）	Linux的五个视频
3）	两道算法
4）	练习前一天看的Linux命令
5） String源码
4.学习任务完成度： （100）%[注：0% ~ 100%]
5.对自己今天学习的满意度：（7）分 [注：1-10分]
6.对今天的学习做一句话的总结：
由于对自己的时间没有很好地计算好使自己的到很晚才完成提交日志
附录：
算法1、跳跃游戏 II
题目描述提示帮助提交记录社区讨论阅读解答
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
说明:

假设你总是可以到达数组的最后一个位置。
class Solution {
    public int jump(int[] nums) {
        int max=0,end=0,cnt=0;
        for(int i=0;i<nums.length-1;i++){
            max=Math.max(max,i+nums[i]);
            if(end==i){
                end=max;
                cnt++;
            }
        }
        return cnt;
    }
}
算法2、跳跃游戏
题目描述提示帮助提交记录社区讨论阅读解答
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
class Solution {
    public boolean canJump(int[] num) {
        if(num.length==0 || num.length==1) return true;
        int last=num.length-1;
        for(int i=num.length-1;i>=0;i--){
            if(i+num[i]>=last){
                last=i;
            }
        }
        return last==0;
    }
  
}
算法3、最后一个单词的长度
题目描述提示帮助提交记录社区讨论阅读解答
给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。

如果不存在最后一个单词，请返回 0 。

说明：一个单词是指由字母组成，但不包含任何空格的字符串。

示例:
输入: "Hello World"
输出: 5
class Solution {
    public int lengthOfLastWord(String s) {
        if(s==null||s.trim().length()==0){
            return 0;
        }
        int len=s.length()-1;
        int cnt=0;
        while(len>-1&&s.charAt(len)==' '){
            len--;
        }
        while(len>-1&&s.charAt(len)!=' '){
            len--;
            cnt++;
        }
        return cnt;

    }

}
算法4、螺旋矩阵 II
题目描述提示帮助提交记录社区讨论阅读解答
给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。

示例:

输入: 3
输出:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
class Solution {
    public int[][] generateMatrix(int n) {
        int [][]a=new int [n][n];

        int i,j,k,cnt=1;
        for(k=0;k<n/2;k++){
            i=k;
            j=k;
            for(;j<n-k-1;j++)
                a[i][j]=cnt++;
            for(;i<n-1-k;i++)
                a[i][j]=cnt++;
            for(;j>k;j--)
                a[i][j]=cnt++;
            for(;i>k;i--)
                a[i][j]=cnt++;
        }
        if(n%2!=0) {
            a[n/2][n/2]=n*n;
        }
        return a;
    }
} 
}
【学习内容真实可靠，给自己的评分和完成度客观真实，不谦虚，不夸大】

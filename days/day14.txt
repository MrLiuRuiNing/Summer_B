日报格式:
主  题：日报
汇报人：汤磊
日  期：2018年8月8日 星期三
内  容：
1.今日学习了的内容：
1）学习线程池
2）两道算法
3)开发
2.没有解决的问题：
1.明天的学习计划：
1)开发
2）两道算法
3)Spring

4.学习任务完成度： （50）%[注：0% ~ 100%]
5.对自己今天学习的满意度：（4）分 [注：1-10分]
因为封装时间太长没有时间整合
附录：
算法一


假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1
class Solution {
    public int search(int[] nums, int target) {
        int i=0,j=nums.length-1;
        while(i<j){
            int mid=(i+j)/2;
            if(nums[0]>target^nums[mid]<nums[0]^nums[mid]<target){
                i=mid+1;
            }
            else{
                j=mid;
            }
        }
        return j==i&&nums[i]==target?i:-1;
    }
}
算法二
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int res=find(nums,target);
        if(res==nums.length||nums[res]!=target){
            return new int[]{-1,-1};
        }
        return new int[]{res,find(nums,target+1)-1};
    }
    public int find(int [] nums,int target){
        int left=0,right=nums.length;
        while(right>left){
            int mid=(left+right)>>1;
            if(nums[mid]<target){
                left=mid+1;
            }
            else{
                right=mid;
            }
        }
        return left;
    }
}
【学习内容真实可靠，给自己的评分和完成度客观真实，不谦虚，不夸大】

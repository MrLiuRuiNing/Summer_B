主  题：日报
汇报人：何米娜
日  期：2018年7月28日 星期六
内  容：
1.今日学习了的内容：


<1 Mybatis 的面试题
<2 两道算法
<3 30道选择题


2.没有解决的问题：
<1 Arraylist的源码



3.明天的学习计划：
<1 Arraylist的源码



4.学习任务完成度： （80）  %[注：0% ~ 100%]
5.对自己今天学习的满意度：（8）分 [注：1-10分]
6.对今天的学习做一句话的总结：
	继续努力
算法1：
题目：
package com.lis.tnode;
/**
 * 输入一个链表，输出该链表中倒数第k个结点
 * @author Lenovo
 *
 */

import java.util.Scanner;

public class KNode {
	private static Node head;
	private Node entry;
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		int k=scan.nextInt();
		Node node=new Node();
		KNode listnode=new KNode();
		listnode.add(1);
		listnode.add(7);
		listnode.add(5);
		listnode.add(16);
		listnode.add(15);
		node=solution(head,k);
		System.out.println(node.data);
	}
	public static Node solution(Node head, int k) {
		if(head==null) return head;
		Node node=head;
		int count=0;
		while(node!=null){
			count++;
			node=node.next;
		}
		if(count<k) return null;
		node=head;
		for(int i=0;i<count-k;i++){
			node=node.next;
		}
		return node;
	}
	public void add(Integer i) {
		Node node=new Node(i,null);
		if(head==null){
			head=node;
			entry=node;
		}else{
			entry.next=node;
			entry=node;
		}
		
	}
}

算法2：
package com.lis.tnode;

import java.util.Scanner;
/**
 * 输入一个链表，反转链表后，输出新链表的表头。
 * @author Lenovo
 *
 */
public class ReverseList {
	private static Node head;
	private Node entry;
	public static void main(String[] args) {
	
		Node node=new Node();
		ReverseList listnode=new ReverseList();
		listnode.add(1);
		listnode.add(7);
		listnode.add(5);
		listnode.add(16);
		listnode.add(15);
		printList(head);
//		node=Reverse(head);
		node=Reverse1(head);
		printList(node);
	}
	//以递归的形式实现
	public  static Node Reverse1(Node head1) {
		if(head1==null||head1.next==null) return head1;
        //先反转后面的链表，走到链表的末端结点
        Node node=Reverse1(head1.next);
        //再将当前节点设置为后面节点的后续节点，返回时当前结点为最后结点的前一个
        head1.next.next=head1;
        head1.next=null;
         
		return node;
	}
	public static Node Reverse(Node head) {
		if(head==null) return null;
		Node pre=null;
		Node next=null;
		while(head!=null){
			next=head.next;
			head.next=pre;
			pre=head;
			head=next;
		}
		return pre;
	}
    public static void printList(Node head1){
		for(Node no1 = head1;no1 != null;no1=no1.next){
			System.out.print(no1.data+" ");
		}
		System.out.println(" ");
	}
	public  void add(int i) {
		Node node=new Node(i,null);
		if(head==null){
			head=node;
			entry=node;
		}else{
			entry.next=node;
			entry=node;
		}	
	}
}





